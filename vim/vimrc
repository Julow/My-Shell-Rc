" Vim config

set encoding=utf8
set ignorecase
set hlsearch
set showmatch

set nocompatible
set noswapfile

set wildmenu

set mouse=a

syntax enable

filetype plugin on
filetype indent on

set backspace=eol,start,indent

set autoread

set t_Co=16

set diffopt+=foldcolumn:0

" Disable netrw
let g:loaded_netrw = 1

" Shift+tab = escape
inoremap <S-Tab> <Esc>
vnoremap <S-Tab> <Esc>

" Indent
set smarttab
set shiftwidth=2
set tabstop=2
set autoindent
set smartindent
set expandtab

set wrap

" Formatting
set formatoptions+=roj

" Fold
set foldenable
set foldmethod=indent
set foldlevelstart=99
nnoremap <space> za

" C-l to clear highlighted text
" A custom event is used to allow extensibility
nnoremap <silent> <C-l> :doautocmd User ClearHighlight<return><C-l>
function! s:clear_highlight()
  if v:hlsearch
    call feedkeys(":nohlsearch\<return>")
  endif
endfunction
autocmd User ClearHighlight call s:clear_highlight()

" Scroll
set scrolloff=10

" Remap # to search for the current word and to search forward
" Use the selection in visual mode
nnoremap # "vyiwge/\<\V<C-R>v\><return>
vnoremap # "vyge/\V<C-R>v<return>

" Repeat substitution and search
nnoremap <expr> & expand(v:hlsearch) ? 'n&' : '"vyiw:s/\C\<\V<C-R>v\>/'
" Substitution from selection
vnoremap & "vy:s/\C\V<C-R>v/

" dP and dO, diffput and diffget the current line
nnoremap dO V:diffget<return>
nnoremap dP V:diffput<return>

" Use system clipboard
set clipboard=unnamedplus

" Set window title
set t_ts=]2;
set t_fs=\\
autocmd BufEnter * let &titlestring = expand("%:t")
set title

" Ruler showing filename
" Show size of the selection in visual mode
function! S_selection()
  let l:m = mode()
  if l:m == "v" || l:m == "\<C-V>"
    let l:c = getpos(".")
    let l:v = getpos("v")
    let l:lines = abs(l:c[1] - l:v[1]) + 1
    if l:m ==# "v"
      let l:chars = abs((line2byte(l:c[1]) + l:c[2]) - (line2byte(l:v[1]) + l:v[2])) + 1
    elseif l:m ==# "V"
      let l:chars = line2byte(max([l:c[1], l:v[1]]) + 1) - 1 - line2byte(min([l:c[1], l:v[1]])) + 1
    else
      let l:chars = abs(l:c[2] - l:v[2]) + 1
    endif
    return l:lines . "-" . l:chars
  else
    return ""
  endif
endfunction

" Show line endings format if it's not unix
function! S_linef()
  return &fileformat == "unix" ? "" : &fileformat
endfunction

set ruler
set rulerformat=%30(%=%<%f\ %l:%c%(\ (%{S_selection()})%)%q%(\ [%{S_linef()}%R%W%M]%)%)
set laststatus=0

" Per project vimrc
set exrc
set nomodeline " Disable modeline
set secure

" Color adjustments
hi Folded ctermbg=none ctermfg=blue

hi DiffAdd ctermbg=lightgrey ctermfg=none
hi DiffDelete ctermbg=lightgrey ctermfg=red
hi DiffChange ctermbg=none ctermfg=none
hi DiffText ctermbg=lightgrey ctermfg=none

hi VertSplit ctermbg=none ctermfg=lightgrey cterm=none
hi StatusLine ctermbg=none ctermfg=black cterm=underline
hi StatusLineNC ctermbg=none ctermfg=black cterm=none

" :Gdiffb
" Opens vim-fugitive split diff with the merge-base
command -nargs=1 -complete=custom,fugitive#CompleteObject Gdiffb execute ':Gdiffsplit ' . system("git merge-base " . <q-args> . " HEAD")

" vim-autoformat
nnoremap <C-_> :Autoformat<CR>

" Ctrl+k and Ctrl+j to move up and down inside wrapped lines
nnoremap <C-j> gj
nnoremap <C-k> gk

" Movements in insert mode
inoremap <C-h> <C-o>h
inoremap <C-l> <C-o>l
inoremap <C-j> <C-o>gj
inoremap <C-k> <C-o>gk

" Syntax for some extensions
autocmd BufNewFile,BufRead *.xkb set ft=xkb

" Enable matchit
packadd! matchit
