" Vim config

set encoding=utf8
set ignorecase
set hlsearch
set showmatch

set nocompatible
set noswapfile

set wildmenu

set mouse=a

syntax enable

filetype plugin on
filetype indent on

set backspace=eol,start,indent

set autoread
" Autoread when a buffer is focused. Don't apply to cmd prompt
autocmd BufEnter * if getcmdwintype() == '' | checktime % | endif

set t_Co=16

set ttimeoutlen=10

set diffopt+=foldcolumn:0

" Disable netrw
let loaded_netrw = 1
let loaded_netrwPlugin = 1

" Even if netrw is disabled, this is used by other plugins
" (eg. 'xdg_open.vim')
let g:netrw_gx = "<cfile>"

" Useful when backspace is near the center of the keyboard
nmap <Backspace> -

" Shift+tab = escape
inoremap <S-Tab> <Esc>
vnoremap <S-Tab> <Esc>

" Indent
set smarttab
set shiftwidth=2
set tabstop=2
set autoindent
set smartindent
set expandtab

" Line wrapping
set wrap
set showbreak=‚é•
set breakindent

" Render whitespaces
set list
set listchars=tab:‚á¢\ ,trail:_,nbsp:‚çΩ,multispace:\ \ \ ‚ãÆ,extends:‚Ä¶
hi SpecialKey ctermbg=none ctermfg=grey

" Formatting
set formatoptions+=roj
set nojoinspaces

" Show number of match when searching
set shortmess-=S

" Fold
" Override ZZ and ZQ bindings
set foldmethod=indent
set foldlevelstart=99
nnoremap Z za
vnoremap Z zf
nnoremap z1 :set foldlevel=1<return>
nnoremap z2 :set foldlevel=2<return>

" C-c to clear highlighted text
" This override default C-c
" A custom event is used to allow extensibility
nnoremap <silent> <C-c> :doautocmd User ClearHighlight<return>
inoremap <silent> <C-c> <Esc><C-c>

function! s:clear_highlight()
  if v:hlsearch
    call feedkeys(":nohlsearch\<return>")
  endif
endfunction
autocmd User ClearHighlight call s:clear_highlight()

" Scroll
set scrolloff=10

" Remap # to search for the current word and to search forward
" Use the selection in visual mode
nnoremap # "vyiwge/\<\V<C-R>v\><return>
vnoremap # "vyge/\V<C-R>v<return>

" Repeat substitution and search
nnoremap <expr> & expand(v:hlsearch) ? 'n&' : '"vyiw:s/\C\<\V<C-R>v\>/'
" Substitution from selection
vnoremap & "vy:s/\C\V<C-R>v/

" dP and dO, diffput and diffget the current line
nnoremap dO V:diffget<return>
nnoremap dP V:diffput<return>

" Use system clipboard
set clipboard=unnamedplus

" Set window title
set t_ts=]2;
set t_fs=\\
autocmd BufEnter * let &titlestring = expand("%:t")
set title

" Ruler showing filename
" Show size of the selection in visual mode
function! S_selection()
  let l:m = mode()
  if l:m == "v" || l:m == "\<C-V>"
    let l:c = getpos(".")
    let l:v = getpos("v")
    let l:lines = abs(l:c[1] - l:v[1]) + 1
    if l:m ==# "v"
      let l:chars = abs((line2byte(l:c[1]) + l:c[2]) - (line2byte(l:v[1]) + l:v[2])) + 1
    elseif l:m ==# "V"
      let l:chars = line2byte(max([l:c[1], l:v[1]]) + 1) - 1 - line2byte(min([l:c[1], l:v[1]])) + 1
    else
      let l:chars = abs(l:c[2] - l:v[2]) + 1
    endif
    return l:lines . "-" . l:chars
  else
    return ""
  endif
endfunction

" Show line endings format if it's not unix
function! S_linef()
  return &fileformat == "unix" ? "" : &fileformat
endfunction

" More discreet indicator for unmodifiable or readonly buffers
function! S_readonly()
  return (!&modifiable || &readonly) ? "RO" : ""
endfunction

" Ruler color depending on the current mode
function! S_update_mode()
  let l:m = mode()
  if l:m == "n"
    let l:l = "S_mode_n"
  elseif l:m == "v" || l:m == "\<C-V>"
    let l:l = "S_mode_v"
  elseif l:m == "i" || l:m == "R"
    let l:l = "S_mode_i"
  elseif l:m == "t"
    let l:l = "S_mode_t"
  else
    let l:l = "S_mode_other"
  endif
  execute "highlight link S_mode_link " . l:l
  if !exists('b:s_filename') " Ensure s_filename is set
    call Update_s_filename("%")
  endif
  return ""
endfunction

" Rewrite some filenames (see Update_s_filename)
let g:s_filename_const = {
  \ ".git/index": "Git Status",
  \ ".git/COMMIT_EDITMSG": "Git Commit",
  \ ".git/rebase-merge/git-rebase-todo": "Git Rebase",
  \ }

" Do some processing on the current filename
function! Update_s_filename(buf)
  let l:f = bufname(a:buf)

  if l:f =~ "^fugitive://"
    " Fugitive URIs are shortened to "symbolic:path"
    " Useful to know which is which when using Fugitive diffsplit
    let l:obj = fugitive#Object(l:f) " Returns a string "HASH:PATH"
    let [ l:hash; path ] = split(l:obj, ":")
    if l:hash == '0'
      let l:symbolic = "staged"
    else
      let l:symbolic = systemlist("git name-rev --name-only " . l:hash)[0]
    endif
    let l:f = join([ l:symbolic ] + path, ":")

  elseif l:f =~ "^/"
    " Convert absolute paths to relative paths
    let l:f = fnamemodify(l:f, ":~:.")
    if l:f =~ "^/"
      " Couldn't convert to relative

      if getbufvar(a:buf, "current_syntax") == "help"
        " Help buffers are in this case
        let l:f = "Help " . fnamemodify(l:f, ":t:r")
      endif
    endif
  endif

  if has_key(g:s_filename_const, l:f)
    let l:f = get(g:s_filename_const, l:f)
  " elseif len(l:f) > 20
  "   let l:f = pathshorten(l:f)
  endif

  call setbufvar(a:buf, "s_filename", (l:f != "") ? l:f : "<new>")
endfunction

autocmd BufReadPost,TerminalOpen,BufFilePost * call Update_s_filename("%")

function! S_terminal_update()
  let buf = bufnr("%")
  let b:s_terminal_status = ""
  let b:s_terminal_time = ""
  if getbufvar(buf, "&buftype", "") == "terminal"
    let job = term_getjob(buf)
    let info = job_info(job)
    if info["status"] == "dead"
      if !exists('b:terminal_end_time')
        let b:terminal_end_time = exists('b:terminal_start_time') ? reltime(b:terminal_start_time) : 0
      endif
      let s = info["exitval"]
      let b:s_terminal_status = (s == 0) ? "" : s
      let b:s_terminal_time = printf("%.0fs", reltimefloat(b:terminal_end_time))
    endif
  endif
  return ""
endfunction

autocmd TerminalOpen * let b:terminal_start_time = reltime()

set statusline=%=%{S_update_mode()}%#S_mode_link#%{b:s_filename}%* " Mode and file name
set statusline+=\ %(%q\ %)%(%w\ %) " Vim's flags
set statusline+=%l:%c%(\ (%{S_selection()})%) " Cursor position and selection
set statusline+=%#S_linef#%(\ %{S_linef()}%) " Line feed format
set statusline+=%#S_readonly#%(\ %{S_readonly()}%) " Readonly flag
set statusline^=%#S_terminal_time#%(\ Terminated\ after\ %{b:s_terminal_time}%)%* " Terminal running time
set statusline^=%{S_terminal_update()}%#S_terminal_fail#%(\ [exit\ %{b:s_terminal_status}]%) " Terminal exit status
" Show the status part of the tabline if there's no tabline, only for the
" bottom left window
set statusline+=%{%(tabpagenr('$')==1&&winnr('j')==winnr('l'))?Tabline_status():''%}
set statusline+=\  " An extra space
set laststatus=2
set noruler
set noshowmode

" Show project-wide informations on the right
function Tabline()
  let s = ""
  let curr_tp = tabpagenr()
  for i in range(1, tabpagenr("$"))
    let s .= (i == curr_tp) ? "%#TabLineSel#" : "%#TabLine#"
    let s .= "%" . i . "T %{Tabline_label(" . i . ")} "
  endfor
  let s .= "%#TabLineFill#%="
  let s .= Tabline_status()
  let s .= " "
  return s
endfunction

function Tabline_label(i)
  let buflist = tabpagebuflist(a:i)
  let winnr = tabpagewinnr(a:i)
  let buf = buflist[winnr - 1]
  let name = getbufvar(buf, "s_filename")
  if name == ""
    call Update_s_filename(buf)
    let name = getbufvar(buf, "s_filename")
  endif
  return name
endfunction

function! Tabline_status()
  let s = "%#S_workspace#%( " . $WORKSPACE . "%)" " Workspace name, if any
  let s .= "%#S_fugitive#%( %{FugitiveHead(8)}%)" " Current Git branch
  return s
endfunction

set tabline=%!Tabline()

" Per project vimrc
set exrc
set nomodeline " Disable modeline
set secure

" Color adjustments
hi Folded ctermbg=none ctermfg=blue

hi DiffAdd ctermbg=lightgrey ctermfg=green
hi DiffDelete ctermbg=lightgrey ctermfg=red
hi DiffChange ctermbg=none ctermfg=none
hi DiffText ctermbg=lightgrey ctermfg=none

hi VertSplit ctermbg=none ctermfg=lightgrey cterm=none

" Statusline
hi StatusLine ctermbg=lightgrey ctermfg=black cterm=nocombine
" nocombine is dummy to avoid Vim printing '^^^'
hi StatusLineNC ctermbg=lightgrey ctermfg=black cterm=none
hi StatusLineTerm ctermbg=lightgrey ctermfg=none cterm=none
hi StatusLineTermNC ctermbg=lightgrey ctermfg=none cterm=none
hi S_readonly ctermbg=lightgrey ctermfg=yellow cterm=none
hi S_linef ctermbg=lightgrey ctermfg=red cterm=none
hi S_mode_n ctermbg=lightgrey ctermfg=none cterm=none
hi S_mode_i ctermbg=lightgrey ctermfg=yellow cterm=none
hi S_mode_v ctermbg=lightgrey ctermfg=green cterm=none
hi S_mode_t ctermbg=blue ctermfg=none cterm=none
hi S_mode_other ctermbg=lightgrey ctermfg=red cterm=none
hi S_terminal_fail ctermbg=lightgrey ctermfg=red cterm=none
hi S_terminal_time ctermbg=lightgrey ctermfg=yellow cterm=none

" Tabline
hi TabLine ctermbg=lightgrey ctermfg=none cterm=none
hi TabLineSel ctermbg=none ctermfg=none cterm=none
hi TabLineFill ctermbg=lightgrey ctermfg=none cterm=none
hi S_fugitive ctermbg=lightgrey ctermfg=magenta cterm=none
hi S_workspace ctermbg=lightgrey ctermfg=green cterm=none

" :Gdiffb
" Opens vim-fugitive split diff with the merge-base
command -nargs=1 -complete=custom,fugitive#CompleteObject Gdiffb execute ':Gdiffsplit ' . system("git merge-base " . <q-args> . " HEAD")

" \g to open fugitive status
nnoremap <Leader>g :tab Git<return>

" Don't move the cursor to first column when scrolling
set nostartofline

" ftdetect
autocmd BufNewFile,BufRead *.xkb setlocal ft=xkb
autocmd BufNewFile,BufRead *.t setlocal ft=cram
autocmd BufNewFile,BufRead *.tsv setlocal ft=tsv

" Q to save file
nnoremap Q :w<return>

" Enable matchit
packadd! matchit

" Delete to the end of the line or to the end of the current matchit pair
function! End_of_line_or_pair()
  let l:initial = getpos('.')
  " Go left, in case we are on the beginning of a pair
  normal h]%
  let l:endofpair = getpos('.')
  call setpos('.', l:initial) " Restore cursor position
  " endofpair is on the same line but isn't under the cursor
  if l:initial[1] == l:endofpair[1] && l:initial[2] < l:endofpair[2]
    normal v]%h
  else
    normal vg_
  endif
endfunction

" Text object for End_of_line_or_pair
onoremap <silent> a% :<C-u>call End_of_line_or_pair()<return>
vnoremap <silent> a% :<C-u>call End_of_line_or_pair()<return>

nmap D da%
nmap C ca%
nmap Y ya%

" Mapping for vim-surround with operator up
nmap g( ysa%(
nmap g) ysa%)
nmap g{ ysa%{
nmap g} ysa%}
nmap g[ ysa%[
nmap g] ysa%]
nmap g"" ysa%"
nmap g"' ysa%'
nmap g"` ysa%`
nmap g< ysa%<
nmap g> ysa%>

" Delete text without yanking
nnoremap <Leader>d "_d
vnoremap <Leader>d "_d

" ---

" Require plugin https://github.com/mkotha/conflict3
" [C and ]C to navigate between conflict and enable conflict3 highlighting
" <Leader>C to try to automatically resolve
" <Leader>K to resolve the conflict by taking the version the cursor is in

" Search a conflict and highlight it with conflict3
" Flag can be 'b' to search backward
function! Next_conflict(flag)
  let next = search('\V\^<<<<<<<', a:flag)
  if next == 0
    echohl ErrorMsg
    echomsg "No conflict found"
    echohl None
    return
  endif
  call setpos('.', next)
  echomsg "Found"
  Conflict3Highlight
endfunction

nnoremap [C :call Next_conflict('b')<return>
nnoremap ]C :call Next_conflict('')<return>
nnoremap <Leader>C :Conflict3ResolveAll \| Conflict3Shrink!<return>
nnoremap <Leader>K :Conflict3TakeThis<return>

hi link Conflict3Local DiffAdd
hi Conflict3Remote ctermbg=lightgrey ctermfg=lightblue
hi link Conflict3Both DiffText
hi link Conflict3LocalDel DiffDelete
hi Conflict3RemoteDel ctermbg=lightgrey ctermfg=red

" Clear conflict3 highlight on C-c
autocmd User ClearHighlight Conflict3Clear

function! Setup_conflicts_plugin()
  " % to jump between the markers
  let b:match_words = get(b:, "match_words", "") . ",<<<<<<<:=======:>>>>>>>"

  " Highlight conflict markers
  " https://vi.stackexchange.com/questions/19639/change-background-color-of-git-conflict-marker-sections
  syn region conflictStart start=/^<<<<<<< .*$/ end=/^\ze\(=======$\||||||||\)/
  syn region conflictMiddle start=/^||||||| .*$/ end=/^\ze=======$/
  syn region conflictEnd start=/^\(=======$\||||||| |\)/ end=/^>>>>>>> .*$/
endfunction

highlight conflictStart ctermfg=red
highlight conflictMiddle ctermfg=blue
highlight conflictEnd ctermfg=green

autocmd BufNewFile,BufRead * call Setup_conflicts_plugin()

" Replace the range lnum,lnum+count by the content of a file
function! Replace_from_file(file, lnum, count)
  " :delete will insert an emtpy blank line if we clear the whole buffer
  " We'll need to remove it later
  let extra_blank_line = (a:lnum == 1 && a:count == line("$")) ? 1 : 0
  execute a:lnum "delete _" a:count
  execute (a:lnum - 1) "read" a:file
  if extra_blank_line == 1
    let last_line = line("$")
    call assert_true(getline(last_line) == "")
    execute last_line "delete _"
  endif
endfunction

" Run the formatter, handle non-zero exit code and stderr
" "%" is expanded to the current file name, shell escaped
function! Run_formatter(formatprg, lnum, count)
  " Expand %
  let cmd = expandcmd(a:formatprg)
  let lines = getline(a:lnum, a:lnum + a:count - 1)
  " Format, redirect output to a temporary file
  let tempfile = tempname()
  let errors = systemlist(cmd . " > " . tempfile, lines)
  if v:shell_error == 0
    " Update buffer
    call Replace_from_file(tempfile, a:lnum, a:count)
  else
    echohl ErrorMsg
    echon "Error while executing '" cmd "' (" v:shell_error "):\n" join(errors, "\n")
    echohl None
  endif
  call delete(tempfile)
  return 0
endfunction

" formatexpr, this is better than the default because it handles errors
function! Format_expr()
  if &formatprg == ""
    return 1 " No formatprg, fallback to default
  endif
  if v:char != ""
    return 1 " Automatic formatting, fallback to default
  endif
  call Run_formatter(&formatprg, v:lnum, v:count)
endfunction

set formatexpr=Format_expr()

" Format the whole buffer
" Use b:full_formatprg over &formatprg if set.
function! Format_buffer()
  let formatprg = exists('b:full_formatprg') ? b:full_formatprg : &formatprg
  let cpos = getcurpos()
  call Run_formatter(formatprg, 1, line("$"))
  call setpos('.', cpos) " Restore the cursor position
endfunction

" Format a paragraph
nnoremap gQ gqip
" Format the whole buffer
nnoremap \Q :call Format_buffer()<return>

" Map C-= to reindent the current line
" Also in insert mode
inoremap <C-=> <C-o>==
nnoremap <C-=> ==

" Bind \[ and \] to navigate between quickfixes
nnoremap <Leader>[ :cprevious<return>
nnoremap <Leader>] :cnext<return>

" Other settings are unreliable.
" <C-Enter> in qf is remapped to open a new window.
set switchbuf=uselast

function! Quickfix_open_split()
  let l:n = line(".")
  execute "new"
  execute l:n "cc"
endfunction

" Open the quickfix window when it changes and is not empty
autocmd QuickFixCmdPost * cwindow

" Bind C-Enter to open a quickfix entry in a new split
" Bind C-w Enter for new tabs
autocmd FileType qf nnoremap <buffer> <C-Enter> :call Quickfix_open_split()<return>

" Let the quickfix window resize like the other windows.
autocmd FileType qf setlocal nowinfixheight

" Recursive grep
set grepprg=grep\ -rn

nnoremap <Leader>m :make!<return>

" Close the quickfix window
nnoremap <Leader>M :cclose<return>

" wincmd
nmap <Space> <C-w>
" Add a binding for :tabonly
nnoremap <C-w>O :tabonly<return>
nnoremap <C-w>N :tab split<return>

" Terminal window mappings
" Use a simpler key to type for termwinkey. @@ sends @ to the terminal.
" C-hjkl are bound for window/tab navigation, prefix with @ to send.
set termwinkey=@
tnoremap <C-j> @w
tnoremap <C-k> @W
tnoremap @<C-h> <C-h>
tnoremap @<C-j> <C-j>
tnoremap @<C-k> <C-k>
tnoremap @<C-l> <C-l>
tnoremap @. @""
tnoremap @! @:term<space>
tnoremap <C-h> @gT
tnoremap <C-l> @gt

let g:runtest_buf = -1

" Run a command in a new terminal window.
" Reuse the previous terminal buffer if any, killing the previous job if it's
" still running.
function! Runtest(cmd)
  let options = {}
  let previous_buf = bufnr(g:runtest_buf)
  if previous_buf > 0 " Reuse previous terminal window if any
    let job = term_getjob(previous_buf)
    let info = job_info(job)
    if info["status"] == "run" " Kill the previous job if running
      if job_stop(job) != 1
        echo "Couldn't kill current job"
        return
      endif
      call term_wait(previous_buf)
    endif
    let win = bufwinnr(previous_buf)
    execute win "wincmd w"
    let options['curwin'] = 1
  endif
  let g:runtest_buf = term_start(a:cmd, options)
endfunction

function! Runtest_runtestprg()
  if !exists("g:runtestprg")
    echohl WarningMsg
    echon "g:runtestprg is not set"
    echohl None
    return
  endif
  call Runtest(expandcmd(g:runtestprg))
endfunction

" Runtest
" Example: let g:runtestprg = "make test"
nnoremap <Leader>r :call Runtest_runtestprg()<return>

" Find a file by name with fd
function! Fd(...)
  let args = map(copy(a:000), 'shellescape(v:val)')
  let lines = systemlist('fd ' . g:fd_args . ' ' . join(args))
  if len(lines) == 0
    echohl WarningMsg
    echo "No match found"
    echohl None
  else
    call setqflist([], 'r', {'lines': lines, 'efm': '%f'})
    cwindow
  endif
endfunction

let g:fd_args = "--follow"

command -nargs=* -complete=dir Fd call Fd(<f-args>)

" gf open file that don't exist
nnoremap gf :e <cfile><return>
" gF to open a file in a new window
nnoremap gF :split <cfile><return>

" Originally from kristijanhusak, https://github.com/tpope/vim-fugitive/issues/132#issuecomment-649516204
" With some improvements
command! -nargs=* DiffHistory call s:view_git_history(<f-args>)

function! s:view_git_history(...) abort
  let args = map(copy(a:000), 'shellescape(v:val)')
  execute "Git difftool --name-only " . join(args)
  call s:diff_current_quickfix_entry()
  " Bind <CR> for current quickfix window to properly set up diff split layout after selecting an item
  " There's probably a better way to map this without changing the window
  copen
  nnoremap <buffer> <CR> <CR><BAR>:call <sid>diff_current_quickfix_entry()<CR>
  wincmd p
endfunction

function s:diff_current_quickfix_entry() abort
  " Cleanup windows
  for window in getwininfo()
    if window.winnr !=? winnr() && bufname(window.bufnr) =~? '^fugitive:'
      exe 'bdelete' window.bufnr
    endif
  endfor
  cc
  call s:add_mappings()
  let qf = getqflist({'context': 0, 'idx': 0})
  if get(qf, 'idx') && type(get(qf, 'context')) == type({}) && type(get(qf.context, 'items')) == type([])
    let diff = get(qf.context.items[qf.idx - 1], 'diff', [])
    echom string(reverse(range(len(diff))))
    for i in reverse(range(len(diff)))
      " Silent to avoid error on removed files
      silent exe (i ? 'leftabove' : 'rightbelow') 'vert diffsplit' fnameescape(diff[i].filename)
      call s:add_mappings()
    endfor
  endif
endfunction

function! s:add_mappings() abort
  nnoremap <leader>] :cnext <BAR> :call <sid>diff_current_quickfix_entry()<CR>
  nnoremap <leader>[ :cprevious <BAR> :call <sid>diff_current_quickfix_entry()<CR>
  " Reset quickfix height. Sometimes it messes up after selecting another item
  11copen
  wincmd p
endfunction

" Shortcut for open running a program in the terminal
nnoremap ! :term<space>
nnoremap <C-1> :tab term<space>

" Restart a terminal job
function! Restart_terminal_job(...)
  let buf = bufnr("%")
  let job = term_getjob(buf)
  let info = job_info(job)
  if info["status"] == "run"
    if job_stop(job) != 1
      echo "Couldn't kill current job"
      return
    endif
    call term_wait(buf)
  endif
  let cmd = (len(a:000) > 0) ? copy(a:000) : info["cmd"]
  call term_start(cmd, #{ curwin: 1 })
endfunction

function! Last_job_command()
  let info = job_info(term_getjob(bufnr("%")))
  return join(info["cmd"], " ")
endfunction

" Terminal normal mapping
function! Setup_terminal_rc()
  setlocal nolist

  " Restart a job in the current terminal
  " If no arguments are given, restart the previous command
  command! -nargs=* -complete=file RestartJob call Restart_terminal_job(<f-args>)

  " Restart a job in a terminal
  nnoremap <buffer> <C-return> :RestartJob<return>

  " Type RestartJob command and allow to edit it
  nnoremap <buffer> <C-1> :RestartJob <C-r>=Last_job_command()<return>
endfunction

autocmd TerminalOpen * call Setup_terminal_rc()

" Clear Sneak highlighting and states with C-c
autocmd User ClearHighlight call sneak#cancel()

function! Update_word_highlighting()
  if b:wh_match_id != -1
    call matchdelete(b:wh_match_id)
  endif
  " Find the word under the cursor
  let [_, l, c, _] = getpos('.')
  let word = matchstr(getline(l), '\k\+\%' . c . 'c\k*')
  if word == ""
    let b:wh_match_id = -1
  else
    let b:wh_match_id = matchadd("Word_highlight", '\V\<' . word . '\>', 42)
  endif
endfunction

function! Enable_word_highlighting()
  let b:wh_match_id = -1
  call Update_word_highlighting()
endfunction

function! Disable_word_highlighting()
  if b:wh_match_id != -1
    call matchdelete(b:wh_match_id)
    let b:wh_match_id = -1
  endif
endfunction

autocmd InsertEnter * set hlsearch | call Enable_word_highlighting()
autocmd CursorMovedI * call Update_word_highlighting()
autocmd InsertLeave * call Disable_word_highlighting()

hi Word_highlight ctermbg=none ctermfg=none cterm=underline

function! Pos_equal(a, b)
  return (a:a[1] == a:b[1] && a:a[2] == a:b[2])
endfunction

function! Cursor_in_the_middle(dir)
  let last_pos = getpos("''")
  let curr_pos = getcurpos()
  let a_pos = get(b:, "a_pos", last_pos)
  let b_pos = get(b:, "b_pos", curr_pos)
  if a_pos[1] > b_pos[1] || (a_pos[1] == b_pos[1] && a_pos[2] > b_pos[2])
    let [a_pos, b_pos] = [b_pos, a_pos] " a_pos <= b_pos
  endif
  if Pos_equal(get(b:, "curr_pos", last_pos), curr_pos)
    " Didn't move since. Defaults to 'last_pos' to avoid the initial state
    " a_pos <= curr_pos <= b_pos
    let b:a_pos = (a:dir > 0) ? b_pos : a_pos
    let b:b_pos = curr_pos
  else
    let b:a_pos = last_pos
    let b:b_pos = curr_pos
  endif
  let b:curr_pos = copy(curr_pos)
  let i = (b:a_pos[1] != b:b_pos[1]) ? 1 : 2 " Vertical or horizontal
  let b:curr_pos[i] = (b:a_pos[i] + b:b_pos[i]) / 2
  call setpos(".", b:curr_pos)
endfunction

" Disabled as I don't use them
" nnoremap <C-n> :call Cursor_in_the_middle(-1)<return>
" nnoremap <C-m> :call Cursor_in_the_middle(1)<return>
" vnoremap <C-n> :<C-u>call Cursor_in_the_middle(-1)<return>
" vnoremap <C-m> :<C-u>call Cursor_in_the_middle(1)<return>

" Copy the path to the current file into clipboard
nnoremap y<C-f> :let @+ = expand("%")<return>
" With line number
nnoremap y<C-l> :let @+ = expand("%") . ":" . line(".")<return>

" Configuration for plugin 'dwm.vim'
let g:dwm_map_keys = 0 " Disable default bindings
nmap <C-Space> <Plug>DWMFocus
" C-j and C-k for window navigation, C-Space for focus.
nnoremap <C-j> <C-w>w
nnoremap <C-k> <C-w>W
" Remap 'new' and 'close' bindings.
nnoremap <C-w>n <Plug>DWMNew
nnoremap <C-w>q <Plug>DWMClose

" Map C-h and C-l for tab movements
nnoremap <C-h> gT
nnoremap <C-l> gt

set winwidth=80

" Remap visual mode <p> to not change registers
" Assumes clipboard=unnamedplus
if has('clipboard')
  vnoremap p "_c<C-r><C-p>+<Esc>
else
  vnoremap p "_c<C-r><C-p>"<Esc>
endif

" From https://stackoverflow.com/questions/3878692/how-to-create-an-alias-for-a-command-in-vim
fun! SetupCommandAlias(from, to)
  exec 'cnoreabbrev <expr> '.a:from
        \ .' ((getcmdtype() is# ":" && getcmdline() is# "'.a:from.'")'
        \ .'? ("'.a:to.'") : ("'.a:from.'"))'
endfun

" Command shorthands
call SetupCommandAlias("G", "Git -p")

inoremap <C-;> <C-r>=strftime("%F %H:%M")<Enter>

nnoremap <C-w>= <C-w>_<C-w>=

" Helper function for Cmd_operator
function! Cmd_operator_func(command)
  execute "'[,']" .. a:command
endfunction

" Run a command on a range selected by a motion.
" For example, to define an operator that calls :sort on a range of line:
"     nnoremap <expr> ,s Cmd_operator("sort")
" Then, to sort a paragraph, type:
"     ,sap
" It's repeatable with .
function! Cmd_operator(command)
  let &opfunc = {mode -> Cmd_operator_func(a:command)}
  return "g@"
endfunction

" Sort a range of lines
nnoremap <expr> <Leader>s Cmd_operator("sort")
vnoremap <Leader>s :sort<return>

" Enable folding from the builtin xml plugin, which is disabled for some
" reason.
let g:xml_syntax_folding = 1
