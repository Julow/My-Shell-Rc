" Vim config

set encoding=utf8
set ignorecase
set hlsearch
set showmatch

set nocompatible
set noswapfile

set wildmenu

set mouse=a

syntax enable

filetype plugin on
filetype indent on

set backspace=eol,start,indent

set autoread
autocmd BufEnter * :checktime

set t_Co=16

set diffopt+=foldcolumn:0

" Disable netrw
let g:loaded_netrw = 1

" Shift+tab = escape
inoremap <S-Tab> <Esc>
vnoremap <S-Tab> <Esc>

" Indent
set smarttab
set shiftwidth=2
set tabstop=2
set autoindent
set smartindent
set expandtab

set wrap

" Formatting
set formatoptions+=roj

" Show number of match when searching
set shortmess-=S

" Fold
" Override ZZ and ZQ bindings
set foldmethod=indent
set foldlevelstart=99
nnoremap Z za
vnoremap Z zf
nnoremap z1 :set foldlevel=1<return>
nnoremap z2 :set foldlevel=2<return>

" C-c to clear highlighted text
" This override default C-c
" A custom event is used to allow extensibility
nnoremap <silent> <C-c> :doautocmd User ClearHighlight<return>
inoremap <silent> <C-c> <Esc><C-c>

function! s:clear_highlight()
  if v:hlsearch
    call feedkeys(":nohlsearch\<return>")
  endif
endfunction
autocmd User ClearHighlight call s:clear_highlight()

" Scroll
set scrolloff=10

" Remap # to search for the current word and to search forward
" Use the selection in visual mode
nnoremap # "vyiwge/\<\V<C-R>v\><return>
vnoremap # "vyge/\V<C-R>v<return>

" Repeat substitution and search
nnoremap <expr> & expand(v:hlsearch) ? 'n&' : '"vyiw:s/\C\<\V<C-R>v\>/'
" Substitution from selection
vnoremap & "vy:s/\C\V<C-R>v/

" dP and dO, diffput and diffget the current line
nnoremap dO V:diffget<return>
nnoremap dP V:diffput<return>

" Use system clipboard
set clipboard=unnamedplus

" Set window title
set t_ts=]2;
set t_fs=\\
autocmd BufEnter * let &titlestring = expand("%:t")
set title

" Ruler showing filename
" Show size of the selection in visual mode
function! S_selection()
  let l:m = mode()
  if l:m == "v" || l:m == "\<C-V>"
    let l:c = getpos(".")
    let l:v = getpos("v")
    let l:lines = abs(l:c[1] - l:v[1]) + 1
    if l:m ==# "v"
      let l:chars = abs((line2byte(l:c[1]) + l:c[2]) - (line2byte(l:v[1]) + l:v[2])) + 1
    elseif l:m ==# "V"
      let l:chars = line2byte(max([l:c[1], l:v[1]]) + 1) - 1 - line2byte(min([l:c[1], l:v[1]])) + 1
    else
      let l:chars = abs(l:c[2] - l:v[2]) + 1
    endif
    return l:lines . "-" . l:chars
  else
    return ""
  endif
endfunction

" Show line endings format if it's not unix
function! S_linef()
  return &fileformat == "unix" ? "" : &fileformat
endfunction

set ruler
set rulerformat=%50(%=%f\ %<\ %l:%c%(\ (%{S_selection()})%)%q%(\ [%{S_linef()}%R%W%M]%)%)
set laststatus=0

" Per project vimrc
set exrc
set nomodeline " Disable modeline
set secure

" Color adjustments
hi Folded ctermbg=none ctermfg=blue

hi DiffAdd ctermbg=lightgrey ctermfg=none
hi DiffDelete ctermbg=lightgrey ctermfg=red
hi DiffChange ctermbg=none ctermfg=none
hi DiffText ctermbg=lightgrey ctermfg=none

hi VertSplit ctermbg=none ctermfg=lightgrey cterm=none
hi StatusLine ctermbg=none ctermfg=black cterm=underline
hi StatusLineNC ctermbg=none ctermfg=black cterm=none

" :Gdiffb
" Opens vim-fugitive split diff with the merge-base
command -nargs=1 -complete=custom,fugitive#CompleteObject Gdiffb execute ':Gdiffsplit ' . system("git merge-base " . <q-args> . " HEAD")

" Ctrl+k and Ctrl+j to move up and down inside wrapped lines
nnoremap <C-j> gj
nnoremap <C-k> gk

" Ctrl+hjkl to Ctrl+w hjkl
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l

" Don't move the cursor to first column when scrolling
set nostartofline

" Syntax for some extensions
autocmd BufNewFile,BufRead *.xkb set ft=xkb

" Q to save file
nnoremap Q :w<return>

" Enable matchit
packadd! matchit

" Delete to the end of the line or to the end of the current matchit pair
function! End_of_line_or_pair()
  let l:initial = getpos('.')
  " Go left, in case we are on the beginning of a pair
  normal h]%
  let l:endofpair = getpos('.')
  call setpos('.', l:initial) " Restore cursor position
  " endofpair is on the same line but isn't under the cursor
  if l:initial[1] == l:endofpair[1] && l:initial[2] < l:endofpair[2]
    normal v]%h
  else
    normal vg_
  endif
endfunction

" Operator for End_of_line_or_pair
onoremap <silent> up :<C-U>call End_of_line_or_pair()<return>

nmap D dup
nmap C cup
nmap Y yup

" Delete text without yanking
nnoremap <Leader>d "_d
vnoremap <Leader>d "_d

" ---

" Require plugin https://github.com/mkotha/conflict3
" [C and ]C to navigate between conflict and enable conflict3 highlighting
" <Leader>C to try to automatically resolve
" <Leader>K to resolve the conflict by taking the version the cursor is in

" Search a conflict and highlight it with conflict3
" Flag can be 'b' to search backward
function! Next_conflict(flag)
  let next = search('\V\^<<<<<<<', a:flag)
  if next == 0
    echohl ErrorMsg
    echomsg "No conflict found"
    echohl None
    return
  endif
  call setpos('.', next)
  echomsg "Found"
  Conflict3Highlight
endfunction

nnoremap [C :call Next_conflict('b')<return>
nnoremap ]C :call Next_conflict('')<return>
nnoremap <Leader>C :Conflict3ResolveAll \| Conflict3Shrink!<return>
nnoremap <Leader>K :Conflict3TakeThis<return>

" Clear conflict3 highlight on C-c
autocmd User ClearHighlight Conflict3Clear

" Run &formatprg (like the default), handle non-zero exit code and stderr
" "%" is expanded to the current file name, shell escaped
function! Run_formatter()
  if &formatprg == ""
    return 1 " No formatprg, fallback to default
  endif
  if v:char != ""
    return 1 " Automatic formatting, fallback to default
  endif
  " Expand %
  let cmd = substitute(&formatprg, "%", expand("%::S"), "")
  let lines = getline(v:lnum, v:lnum + v:count - 1)
  let tempfile = tempname()
  let errors = systemlist(cmd . " > " . tempfile, lines)
  if v:shell_error == 0
    execute v:lnum "delete _" v:count
    let read_at = max([v:lnum - 1, 0])
    execute read_at "read" tempfile
  else
    echohl ErrorMsg
    echon "Error while executing '" cmd "' (" v:shell_error "):\n" join(errors, "\n")
    echohl None
  endif
  call delete(tempfile)
  return 0
endfunction

set formatexpr=Run_formatter()

" Format a paragraph
nnoremap gQ gqip

" Map C-= to reindent the current line
" Also in insert mode
inoremap <C-=> <C-o>==
nnoremap <C-=> ==

" Open the quickfix window when it changes and is not empty
autocmd QuickFixCmdPost * cwindow

" Bind \[ and \] to navigate between quickfixes
nnoremap <Leader>[ :cprevious<return>
nnoremap <Leader>] :cnext<return>

" Use 'git grep' as :grep
set grepprg=git\ grep\ -n

nnoremap <Leader>m :make<return>

" Close the quickfix window
nnoremap <Leader>M :cclose<return>

" wincmd
nmap <Space> <C-w>

" Runtest key
" Example: let g:runtestprg = "make test"
function! Runtest()
  if !exists("g:runtestprg")
    echohl
    echon "g:runtestprg is not set"
    echohl None
    return
  endif
  silent cexpr system(expandcmd(g:runtestprg))
  caddexpr ""
  cwindow
endfunction

nnoremap <Leader>r :call Runtest()<return>
